'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ConsultasSystem-Caju")>  _
Partial Public Class CRUDDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEstudiante(instance As ObjEstudiante)
    End Sub
  Partial Private Sub UpdateEstudiante(instance As ObjEstudiante)
    End Sub
  Partial Private Sub DeleteEstudiante(instance As ObjEstudiante)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System_Tools.My.MySettings.Default.ConsultasSystem_CajuConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Estudiante() As System.Data.Linq.Table(Of ObjEstudiante)
		Get
			Return Me.GetTable(Of ObjEstudiante)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Estudiante")>  _
Partial Public Class ObjEstudiante
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As System.Guid
	
	Private _Codigo As String
	
	Private _NombreEstudiante As String
	
	Private _Usuario As String
	
	Private _Contrasena As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnNombreEstudianteChanging(value As String)
    End Sub
    Partial Private Sub OnNombreEstudianteChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContrasenaChanging(value As String)
    End Sub
    Partial Private Sub OnContrasenaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As System.Guid
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="VarChar(15)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreEstudiante", DbType:="VarChar(50)")>  _
	Public Property NombreEstudiante() As String
		Get
			Return Me._NombreEstudiante
		End Get
		Set
			If (String.Equals(Me._NombreEstudiante, value) = false) Then
				Me.OnNombreEstudianteChanging(value)
				Me.SendPropertyChanging
				Me._NombreEstudiante = value
				Me.SendPropertyChanged("NombreEstudiante")
				Me.OnNombreEstudianteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="VarChar(50)")>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contrasena", DbType:="VarChar(50)")>  _
	Public Property Contrasena() As String
		Get
			Return Me._Contrasena
		End Get
		Set
			If (String.Equals(Me._Contrasena, value) = false) Then
				Me.OnContrasenaChanging(value)
				Me.SendPropertyChanging
				Me._Contrasena = value
				Me.SendPropertyChanged("Contrasena")
				Me.OnContrasenaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
